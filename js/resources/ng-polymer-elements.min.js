!function(angular){angular.module("ng-polymer-elements",[]).config(["$compileProvider","$injector",function($compileProvider,$injector){"use strict";var inputMappings={ngModel:{primitive:"value"},ngDisabled:{primitive:"disabled"}},selectorMappings={ngModel:{primitive:"selected"}},checkMappings={ngModel:{primitive:"checked"},ngDisabled:{primitive:"disabled"}},openableMappings={ngOpened:{primitive:"opened"}},allMappings={paperInput:inputMappings,paperRadioGroup:selectorMappings,paperTabs:selectorMappings,coreSelector:selectorMappings,coreMenu:selectorMappings,paperCheckbox:checkMappings,paperToggleButton:checkMappings,coreOverlay:openableMappings,paperDialog:openableMappings,paperActionDialog:openableMappings,paperToast:openableMappings,paperSlider:inputMappings,coreList:{ngModel:{array:"data"},ngTap:{event:"core-activate"}}};if($injector.has("$ngPolymerMappings")){var extendedMappings=$injector.get("$ngPolymerMappings");angular.extend(allMappings,extendedMappings)}Object.keys(allMappings).forEach(function(tag){var mappings=allMappings[tag];$compileProvider.directive(tag,["$parse","$window",function($parse){var scopeDefinition={},keys=Object.keys(mappings);return keys.forEach(function(attr){var conf=mappings[attr];if(conf.primitive||conf.object||conf.array)scopeDefinition[attr]="=";else if(!conf.event)throw"Invalid mapping for "+attr+" - must contain primitive | object | array | event"}),{restrict:"E",scope:scopeDefinition,link:function(scope,element,attrs){var el=element[0];keys.forEach(function(attr){if(attrs[attr]){var conf=mappings[attr];if(conf.event){var fn=$parse(attrs[attr]);el.addEventListener(conf.event,function(e){scope.$apply(function(){fn(scope.$parent,{$event:e})})})}else{var propertyName=conf.primitive||conf.object||conf.array;conf.object?el[propertyName]={}:conf.array&&(el[propertyName]=[]);var handler=function(value){conf.primitive?el[propertyName]=value:angular.copy(value,el[propertyName])};scope.$watch(attr,handler,!0),handler(scope[attr]);var observer=new PathObserver(el,propertyName);observer.open(function(value){scope.$apply(function(){conf.primitive?scope[attr]=value:angular.copy(value,scope[attr])})})}}})}}}])})}])}(angular);